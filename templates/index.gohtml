<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>VreeDB</title>
    <!-- Include Semantic UI CSS -->
    <link rel="stylesheet" type="text/css" href="/static/semantic.css">
    <link rel="stylesheet" href="/static/codemirror.min.css"/>
    <link rel="stylesheet" href="/static/stylesheets/icon.min.css"/>
</head>

<style>
    .CodeMirror {
        flex: 1;
        vertical-overflow: auto;
        border: 1px solid #eee;
        border-radius: 5px;
    }

    .CodeMirror-linenumbers {
        padding: 0 4px; /* Spacing for line numbers */
    }

    .CodeMirror-lines {
        padding-left: 10px; /* Spacing for the text area */
    }

    .centered-statistic {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .field {
        display: flex;
        align-items: center;
    }
</style>
<body>

<!-- Navigation menu -->
<div class="ui inverted menu">
    <a class="active item" data-tab="dashboard">Dashboard</a>
    <a class="item" data-tab="collections">Collections</a>
    <a class="item" data-tab="visualization">Visualization</a>
    <a class="item" data-tab="analytics">Analytics</a>
    <a class="item" data-tab="workbench">Workbench</a>
    <a class="item" data-tab="neuralnetbuilder">Neural Net Builder</a>
    <a class="item" id="logoutButton" style="margin-left: auto;">Logout</a>
</div>

<!-- Main content -->
<div class="ui active tab segment" data-tab="dashboard">
    <h2 class="ui header">Dashboard</h2>
    <p>Your VreeDB Server.</p>
    <div class="ui segments">
        <div class="ui segment centered-statistic">
            <div class="ui statistic">
                <div class="value">
                    {{.Application.CollectionCount}}
                </div>
                <div class="label">
                    Collections in Database
                </div>
            </div>
        </div>
        <div class="ui segment centered-statistic">
            <div class="ui statistic">
                <div class="value">
                    {{.Application.RamUsage}}
                </div>
                <div class="label">
                    RAM Usage in MB
                </div>
            </div>
        </div>
    </div>
</div>
<div class="ui tab segment" data-tab="collections">
    <h2 class="ui header">Collections</h2>
    <p>Manage your Collections.</p>
    <!-- Collections Tabelle -->
    <div class="ui styled fluid accordion">
        {{range .Collections}}
            <div class="title">
                <i class="dropdown icon"></i>
                {{.Name}}
            </div>
            <div class="content">
                <p>Nodecount: {{.NodeCount}}</p>
                <p>DistanceFunction: {{.DistanceFunc}}</p>
                <p>DiagonalLength: {{.DiagonalLength}}</p>
                {{if .ClassifierReady}}
                    <p>Collection Classifier Readiness: <span style="color:green;">&#10004;</span> Ready to create
                        Classifier</p>
                {{else}}
                    <p>Collection Classifier Readiness: <span style="color:red;">&#10008;</span> Not Ready to create
                        Classifier</p>
                {{end}}
                {{range .Classifier}}
                    <p>Classifier: {{.}}</p>
                {{end}}
                <div class="ui form">
                    <div class="fields">
                        <div class="field">
                            <input type="text" id="classifierName" placeholder="Name">
                        </div>
                        <div class="field">
                            <input type="text" id="classifierDegree" placeholder="Degree">
                        </div>
                        <div class="field">
                            <input type="text" id="classifierCValue" placeholder="CValue">
                        </div>
                        <div class="field">
                            <input type="text" id="classifierEpochs" placeholder="Epochs">
                        </div>
                        <div class="field">
                            <button class="ui button" id="createClassifierButton" data-collection-id="{{.Name}}"
                                    {{if not .ClassifierReady}}disabled{{end}}>Create Classifier
                            </button>
                        </div>
                    </div>
                </div>
                <button class="ui red button" data-collection-id="{{.Name}}">Delete</button>
                <button class="ui green button" data-collection-id="{{.Name}}">Generate 3D Graph</button>
                <div id="scatterPlot"></div>
            </div>
        {{end}}
    </div>
</div>
<div class="ui tab segment" data-tab="visualization">
    <h2 class="ui header">Visualization</h2>
    <p>Visualize your Data.</p>
</div>
<div class="ui tab segment" data-tab="analytics">
    <h2 class="ui header">Analytics</h2>
    <p>Analytics about your Server / Collections.</p>
    <canvas id="analyticsChart"></canvas>
</div>
<div class="ui tab segment" data-tab="workbench">
    <h2 class="ui header">Workbench</h2>
    <p>Communicate with VreeDB via JSON.</p>
    <button class="ui green button" id="sendButton" style="position: absolute; top: 10px; right: 10px;">Send</button>
    <div class="ui selection dropdown" id="dropdownMenu" style="position: absolute; top: 50px; right: 10px;">
        <input type="hidden" name="action">
        <i class="dropdown icon"></i>
        <div class="default text">Select Action</div>
        <div class="menu">
            <div class="item" data-value="delete">/delete</div>
            <div class="item" data-value="createapikey">/createapikey</div>
            <div class="item" data-value="createcollection">/createcollection</div>
            <div class="item" data-value="trainclassifier">/trainclassifier</div>
            <div class="item" data-value="delteclassifier">/delteclassifier</div>
            <div class="item" data-value="classify">/classify</div>
            <div class="item" data-value="search">/search</div>
            <div class="item" data-value="addpoint">/addpoint</div>
            <div class="item" data-value="listcollections">/listcollections</div>
            <div class="item" data-value="deletepoint">/deletepoint</div>
            <div class="item" data-value="getaccessdata">/getaccessdata</div>
        </div>
    </div>
    <div class="editor-container">
        <h3>Input</h3>
        <div id="editor1"></div>
        <h3>Output</h3>
        <div id="editor2"></div>
    </div>
</div>
<div class="ui tab segment" data-tab="neuralnetbuilder">
    <h2 class="ui header" >Neural Net Builder</h2>
    <p>Build your own Neural Net with zero code.</p>
    <div class="ui segments">
        <div class="ui segment centered-statistic">
            <div class="ui statistic" id="neuralNetBuilder">
            </div>
        </div>
    </div>
</div>

<!-- Include jQuery and Semantic UI JavaScript -->
<script src="/static/jquery.js"></script>
<script src="/static/semantic.js"></script>
<script src="/static/codemirror.min.js"></script>
<script src="/static/js.js"></script>
<script src="/static/chartjs.js"></script>
<script src="/static/chartjs_adapter_date.js"></script>
<script src="/static/plotly-2.32.0.min.js"></script>

<script>

    function mergeDuplicatePoints(data) {
        const mergedData = [];

        data.forEach((item) => {
            // Check if this item's type already exists in the mergedData
            const existingItem = mergedData.find((mergedItem) => mergedItem.type === item.type && mergedItem.period === item.period);

            if (existingItem) {
                // If it does, add the current item's sum to the existing item's sum
                existingItem.sum += item.sum;
            } else {
                // If it doesn't, add the current item to the mergedData
                mergedData.push({...item});
            }
        });

        return mergedData;
    }

    // Format the time in the x-axis of the chart
    function formatTime(value) {
        var date = new Date(value);
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();

        // Pad the hours, minutes and seconds with leading zeros, if required
        hours = (hours < 10) ? "0" + hours : hours;
        minutes = (minutes < 10) ? "0" + minutes : minutes;
        seconds = (seconds < 10) ? "0" + seconds : seconds;

        // Combine the hours, minutes and seconds
        var timeString = hours + ":" + minutes + ":" + seconds;

        return timeString;
    }

    $(document).ready(function () {
        // Neural Net Builder
        var neuralNetBuilder = document.getElementById('neuralNetBuilder');

        // Fetch the GoHTML page
        fetch('/neuralnetbuilder')
            .then(response => response.text())
            .then(html => {
                neuralNetBuilder.innerHTML = html;
                copyAndInsertScripts(neuralNetBuilder);
            })
            .catch(err => console.error('Error fetching the HTML:', err));

        function copyAndInsertScripts(container) {
            const scripts = Array.from(container.querySelectorAll('script'));
            scripts.forEach(script => {
                const newScript = document.createElement('script');
                if (script.src) {
                    newScript.src = script.src;
                } else {
                    newScript.textContent = script.textContent;
                }
                document.head.appendChild(newScript);
                script.parentNode.removeChild(script);
            });
        }

        // Chart
        // Chart
        var ctx = document.getElementById('analyticsChart').getContext('2d');
        var analyticsChart = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [
                    {label: 'CLASSIFY', data: [], borderColor: 'rgba(255, 99, 132, 1)', fill: false},
                    {label: 'TRANSACTION', data: [], borderColor: 'rgba(54, 162, 235, 1)', fill: false},
                    {label: 'SEARCH', data: [], borderColor: 'rgba(255, 206, 86, 1)', fill: false},
                    {label: 'DELETE', data: [], borderColor: 'rgba(75, 192, 192, 1)', fill: false},
                    {label: 'ADD', data: [], borderColor: 'rgba(153, 102, 255, 1)', fill: false},
                    {label: 'LOGIN', data: [], borderColor: 'rgba(255, 159, 64, 1)', fill: false},
                    {label: 'SYSTEMEVENT', data: [], borderColor: 'rgba(255, 99, 132, 1)', fill: false}
                ]
            },
            options: {
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'second'
                        },
                        ticks: {
                            callback: function (value, index, values) {
                                // Only show every 5th second
                                if (index % 5 === 0) {
                                    return formatTime(value);
                                } else {
                                    return '';
                                }
                            }
                        }
                    },
                    y: {
                        min: 0,
                        suggestedMax: 100
                    }
                }
            }
        });

        // Grouped data storage
        var groupedData = {};

        // Function to fetch data from the server
        function dataFetch() {
            $.ajax({
                type: "POST",
                url: "/getaccessdata",
                success: function (response) {
                    // If the response is null, do nothing and return
                    if (response === null) {
                        return;
                    }

                    var now = new Date();
                    response.forEach(function (item) {
                        var itemDate = new Date(item.period);
                        // Only consider data from the last 10 minutes
                        if ((now - itemDate) <= 10 * 60 * 1000) {
                            if (!groupedData[item.type]) {
                                groupedData[item.type] = [];
                                var dataset = analyticsChart.data.datasets.find(function (dataset) {
                                    return dataset.label === item.type;
                                });
                                if (dataset) {
                                    dataset.data = groupedData[item.type];
                                } else {
                                    console.error('Unknown item type: ' + item.type);
                                }
                            }
                            groupedData[item.type].push({
                                x: itemDate,
                                y: item.sum
                            });
                        }
                    });

                    // Update the chart
                    analyticsChart.update();
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }

        // Set up an interval that fetches the new data from the server every 5 seconds
        setInterval(dataFetch, 5000);

        // Initialize the tabs and accordions
        $('.ui.accordion').accordion();

        // Event handler for menu item click
        $('[data-tab]').on('click', function () {
            var tabPath = $(this).attr('data-tab');
            localStorage.setItem('activeTab', tabPath);
        });

        var activeTab = localStorage.getItem('activeTab');
        if (activeTab) {
            $('[data-tab]').tab('change tab', activeTab);
        }

        var editor1 = CodeMirror(document.getElementById('editor1'), {
            lineNumbers: true,
            autoRefresh: true,
            mode: 'javascript'
        });
        editor1.refresh();

        var editor2 = CodeMirror(document.getElementById('editor2'), {
            lineNumbers: true,
            autoRefresh: true,
            mode: 'javascript',
            readOnly: true
        });
        editor1.refresh();

        $('#createClassifierButton').on('click', function () {
            // Get values from input fields
            var classifierName = $('#classifierName').val();
            var classifierDegree = parseInt($('#classifierDegree').val(), 10);
            var classifierCValue = parseFloat($('#classifierCValue').val());
            var classifierEpochs = parseInt($('#classifierEpochs').val(), 10);
            var collectionName = $(this).data('collection-id');

            // Create JSON object
            var data = {
                "collection_name": collectionName,
                "classifier_name": classifierName,
                "degree": classifierDegree,
                "c": classifierCValue,
                "epochs": classifierEpochs
            };

            // Send JSON object to the server
            $.ajax({
                type: "PUT",
                url: "/trainclassifier",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    // Here you can add code that will be executed when the request was successful.
                    console.log(response);
                },
                error: function (error) {
                    // Here you can add code that will be executed when an error has occurred.
                    console.log(error);
                }
            });
        });

        // Initialization of tabs and accordions
        $('.menu .item').tab();
        $('.ui.accordion').accordion();

        // Event-Handler for the Delete Button
        $('.ui.accordion').on('click', '.ui.red.button', function () {
            var collectionId = $(this).data('collection-id');
            // Logic for deleting the collection, e.g., AJAX request.
            console.log('Deleting the collection with ID: ' + collectionId);
            // send the json {collection: collectionId} to the servers /delete endpoint to delete the collection
            $.ajax({
                type: "DELETE",
                url: "/delete",
                data: JSON.stringify({name: collectionId}),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                xhrFields: {
                    withCredentials: true
                },
                success: function (data) {
                    location.reload();
                },
                error: function (data) {
                    console.log(data);
                }
            });
        });

        // Event-Handler for the Generate 3D Graph Button
        $('.ui.accordion').on('click', '.ui.green.button', function () {
            var collectionId = $(this).data('collection-id');
            // Logic for deleting the collection, e.g., AJAX request.
            console.log('Generating 3D Graph for the collection with ID: ' + collectionId);
            // send the json {collection: collectionId} to the servers /delete endpoint to delete the collection
            $.ajax({
                type: "POST",
                url: "/createtsne",
                data: JSON.stringify({collection_name: collectionId, dimensions: 3, learning_rate: 0.000001, iterations: 100}),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                xhrFields: {
                    withCredentials: true
                },
                success: function (data) {
                    alert(data);
                    $.ajax({
                        type: "POST",
                        url: "/gettsnedata",
                        data: JSON.stringify({collection_name: collectionId}),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (inner_data) {
                            // 3D Scatter Plot
                            function createScatterPlot(data) {
                                const trace = {
                                    x: data.map(point => point.x),
                                    y: data.map(point => point.y),
                                    z: data.map(point => point.z),
                                    mode: 'markers',
                                    type: 'scatter3d'
                                };

                                Plotly.newPlot('scatterPlot', [trace]); 
                            }

                            // Sample Usage (assuming a <div id="myScatterPlot"></div> exists)
                            const data1 = [
                                { x: 1, y: 2, z: 3 },
                                { x: -2, y: 1, z: 0 },
                                // ... more data points
                            ];

                            createScatterPlot(data1);
                        },
                        error: function (inner_error_data) {
                            alert(inner_error_data);
                            console.log(inner_error_data);
                        }
                    });
                },
                error: function (error_data) {
                    console.log(error_data);
                }
            });
        });

        // Event-Handler for the Send Button
        $('#sendButton').on('click', function () {
            // Logic for sending data, e.g., AJAX request.
            console.log('Sending the data.');
        });
        // activate dropdown
        $('#dropdownMenu').dropdown();

        $('#sendButton').on('click', function () {
            // Get the selected action from the dropdown menu
            var selectedAction = $('#dropdownMenu').dropdown('get value');

            // Check if an action has been selected
            if (!selectedAction) {
                alert('Please select an action from the dropdown menu.');
                return;
            }

            // Get the content from editor1
            var editorContent = editor1.getValue();

            // Check if the content of editor1 is valid JSON
            try {
                var jsonData = JSON.parse(editorContent);
            } catch (error) {
                alert('The content of editor1 is not valid JSON.');
                return;
            }

            // Determine the method based on the selected action
            var method;
            switch (selectedAction) {
                case 'createcollection':
                case 'getaccessdata':
                case 'addpoint':
                case 'addpointbatch':
                case 'trainclassifier':
                case 'createapikey':
                case 'delete':
                case 'deletepoint':
                case 'deleteclassifier':
                case 'search':
                case 'list':
                case 'classify':
                    method = 'POST';
                    break;
                default:
                    alert('Unknown action: ' + selectedAction);
                    return;
            }

            // Send the contents of editor1 as JSON to the server
            $.ajax({
                type: method,
                url: "/" + selectedAction,
                data: JSON.stringify(jsonData),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                xhrFields: {
                    withCredentials: true
                },
                success: function (response) {
                    // Set the server's response in editor2
                    editor2.setValue(JSON.stringify(response, null, 2));
                },
                error: function (error) {
                    // Set the error message in editor2
                    editor2.setValue(JSON.stringify(error, null, 2));
                }
            });
        });

        {{if not .Application.ApiKeyExists}}
        var createApiKeyItem = $('<a class="item" href="/showapikey" id="createApiKeyItem" style="color: red;">Create API-Key</a>');
        $('#logoutButton').before(createApiKeyItem);
        {{end}}

        $('#logoutButton').on('click', function () {
            $.ajax({
                type: "POST",
                url: "/logout",
                success: function (response) {
                    // Redirect to login page or show a success message
                    window.location.href = "/login";
                },
                error: function (error) {
                    // Show an error message
                    console.log(error);
                }
            });
        });
    });

</script>
</body>
</html>
